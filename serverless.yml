# The service name should be a static string and should NOT be prefixed or suffixed with any dynamic variables, such as stage name.
service: serverless-template

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '3'
configValidationMode: error
useDotenv: true

provider:
  name: aws
  runtime: go1.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, env:AWS_DEFAULT_REGION}
  stackTags:
    Name: ${self:service}
    Type: App
    GitRepo: ${self:service}
  endpointType: REGIONAL
  # Enable this block if service needs to set specific bucket
  # deploymentBucket:
  #   name: ${ssm:/serverless-s3-bucket}
  #   blockPublicAccess: true
  #   serverSideEncryption: aws:kms
  #   sseKMSKeyId: ${ssm:/serverless-s3-kms-key, null}

  # Enable this block if service needs to be deployed into VPC
  # vpc: 
  #     securityGroupIds: ${ssm:vpc_sg, null}
  #     subnetIds: ${ssm:app_subnets, null}

  # Enable this block if service needs to set specific iam role
  # iam:
  #   role:
  #     path: /vcs/
  #     permissionsBoundary: !Sub arn:aws:iam::${AWS::AccountId}:policy/ApplicationRuntimeBoundary
  #     statements:
  #       - Effect: Allow
  #         Action:
  #           - logs:CreateLogStream
  #           - logs:PutLogEvents
  #         Resource:
  #           - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*
  #         Condition:
  #           StringEquals:
  #             'aws:RequestedRegion': !Ref AWS::Region
  #   deploymentRole: arn:aws:iam::${aws:accountId}:role/VCSRoleForServerlessDeploy

  # kmsKeyArn: ${ssm:/serverless-lambda-kms-key, null}
  tracing:
    apiGateway: true
    lambda: true
  logRetentionInDays: 90 # not sure it's needed

  # You can define service wide environment variables here
  environment:
    ENVVAR1: "env-var-1"

  # You can restrict API to only allow connection with service platform
  apiGateway:
    resourcePolicy:
      - Effect: Allow
        Principal: '*'
        Action: execute-api:Invoke
        Resource:
          - execute-api:/*/*/*

package:
  artifact: ${env:ARTIFACT_LOC, 'bin'}/functions.zip

functions:
  hello:
    name: ${self:custom.helloFuncName}
    handler: func/hello/handler
    timeout: 15
    runtime: go1.x
    events:
      - http:
          path: /
          method: get

# TODO define CloudFormation resource if you need
resources:
  - Conditions:
      IsInteg: !Equals ['${sls:stage}', integration]
      IsStaging: !Equals ['${sls:stage}', staging]
      IsProd: !Equals ['${sls:stage}', production]
      IsProdLike: !Or [Condition: IsProd, Condition: IsStaging, Condition: IsInteg]
      IsNotProdLike: !Not [Condition: IsProdLike]

  # API domain mapping
  # - ${file(resource/apiMapping.yaml)}

custom:
  helloFuncName: ${sls:stage}-${self:service}-hello

  alerts:
    dashboards: true
    alarms:
      - functionErrors

  # domainName: ${ssm:VCSApiDomainName, null}